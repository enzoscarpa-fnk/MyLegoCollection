@page "/discover"
@using MyLegoCollection.Models
@inject RebrickableService RebrickableService
@inject CollectionService CollectionService

<PageTitle>Sets - My LEGO Collection</PageTitle>

<h4>Discover the latest LEGO sets released</h4>

<!-- Pagination controls -->
<div class="pagination">
    <button @onclick="PreviousPage" disabled="@(currentPage == 1)">&lt;</button>
    <span>&emsp;Page @currentPage of @totalPages&emsp;</span>
    <button @onclick="NextPage" disabled="@(currentPage == totalPages)">&gt;</button>
</div>

@if (sets == null)
{
    <p>Loading sets...</p>
}
else if (!sets.Any())
{
    <p>Sets not found.</p>
}
else
{
    <ul class="sets-grid">
        @foreach (var set in sets.Skip((currentPage - 1) * pageSize).Take(pageSize))
        {
            <li class="set-item">
                <div class="set-image">
                    <img src="@set.SetImgUrl" alt="@set.Name" />
                </div>
                <div class="set-reference">
                    @set.SetNum
                </div>
                <div class="set-details">
                    <strong>@set.Name</strong><br/>
                    @set.Year - @set.NumParts parts<br/>

                    <!-- Button to add set to a collection -->
                    <button @onclick="() => SelectSetToAdd(set)">Add to Collection</button><br/>

                    <!-- Display dropdown if the set's dropdown visibility is enabled -->
                    @if (dropdownVisibility.ContainsKey(set.SetNum) && dropdownVisibility[set.SetNum])
                    {
                        <div class="collection-dropdown">
                            <select @bind="selectedCollectionForSet[set.SetNum]">
                                <option value="">-- Choose a collection --</option>
                                @foreach (var collection in CollectionService.Collections)
                                {
                                    <option value="@collection.Id">@collection.Name</option>
                                }
                            </select>
                            <button @onclick="ConfirmAddToCollection">Confirm</button>

                            <!-- Display success message if any -->
                            @if (successMessages.TryGetValue(set.SetNum, out var successMsg))
                            {
                                <p style="color: green;">@successMsg</p>
                            }

                            <!-- Display error message if any -->
                            @if (errorMessages.TryGetValue(set.SetNum, out var errorMsg))
                            {
                                <p style="color: red;">@errorMsg</p>
                            }
                        </div>
                    }
                </div>
            </li>
        }
    </ul>
}

<!-- Pagination controls -->
<div class="pagination">
    <button @onclick="PreviousPage" disabled="@(currentPage == 1)">&lt;</button>
    <span>&emsp;Page @currentPage of @totalPages&emsp;</span>
    <button @onclick="NextPage" disabled="@(currentPage == totalPages)">&gt;</button>
</div>

@code {
    private List<LegoSet> sets;
    private LegoSet? selectedSet; // Selected set to add in a collection
    private Dictionary<string, bool> dropdownVisibility = new(); // State of dropdown menu visibility for each set
    private Dictionary<string, string> selectedCollectionForSet = new(); // Selected collection where a set will be added
    private Dictionary<string, string> successMessages = new(); 
    private Dictionary<string, string> errorMessages = new();
    
    // Pagination variables
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => sets == null || sets.Count == 0 ? 1 : (int)Math.Ceiling((double)sets.Count / pageSize);

    // Called when the component initializes
    protected override async Task OnInitializedAsync()
    {
        sets = await RebrickableService.GetLatestSetsAsync(); // Load latest LEGO sets from the API
        
        if (CollectionService.Collections.Count == 0) // Prevents reloading if already in LocalStorage
        {
            await CollectionService.LoadCollectionsAsync(); // Load existing collections from LocalStorage
        }
        
        // Initialize dropdown visibility for each set
        foreach (var set in sets)
        {
            if (!dropdownVisibility.ContainsKey(set.SetNum))
            {
                dropdownVisibility[set.SetNum] = false;
                selectedCollectionForSet[set.SetNum] = ""; // Initialize the collection selection
                successMessages[set.SetNum] = "";
                errorMessages[set.SetNum] = "";
            }
        }
    }
    
    private void SelectSetToAdd(LegoSet set)
    {
        selectedSet = set;
        
        // Ensure key exists in dictionary
        if (!dropdownVisibility.ContainsKey(set.SetNum))
        {
            dropdownVisibility[set.SetNum] = false; // Initialize dropdown visibility
            selectedCollectionForSet[set.SetNum] = ""; // Initialize collection selection
            successMessages[set.SetNum] = "";
            errorMessages[set.SetNum] = "";
        }

        // Toggle visibility of dropdown menu for the selected set
        dropdownVisibility[set.SetNum] = !dropdownVisibility[set.SetNum]; // Toggle the visibility

        // Reinitialize other sets' dropdowns
        foreach (var key in dropdownVisibility.Keys.ToList())
        {
            if (key != set.SetNum)
            {
                dropdownVisibility[key] = false;
            }
        }
        
        StateHasChanged();
    }

    private async Task ConfirmAddToCollection()
    {
        // Validate if a set and a collection are selected
        if (selectedSet == null || !selectedCollectionForSet.ContainsKey(selectedSet.SetNum) || string.IsNullOrEmpty(selectedCollectionForSet[selectedSet.SetNum]))
        {
            errorMessages[selectedSet?.SetNum ?? "unknown"] = "Please select a collection first.";
            successMessages.Remove(selectedSet?.SetNum ?? "unknown");
            return;
        }
        
        // Ensure dropdown visibility state is initialized
        if (!dropdownVisibility.ContainsKey(selectedSet?.SetNum ?? ""))
        {
            dropdownVisibility[selectedSet?.SetNum ?? ""] = false;
            selectedCollectionForSet[selectedSet.SetNum] = ""; // Initialize collection selection
            successMessages[selectedSet.SetNum] = "";
            errorMessages[selectedSet.SetNum] = "";
        }

        // Retrieve selected collection
        var collection = CollectionService.Collections.FirstOrDefault(c => c.Id == selectedCollectionForSet[selectedSet.SetNum]);

        if (collection == null)
        {
            errorMessages[selectedSet.SetNum] = "Collection not found.";
            successMessages.Remove(selectedSet.SetNum);
            return;
        }

        // Verify if the set is already in the collection
        if (collection.Sets.Any(s => s.SetNum == selectedSet.SetNum))
        {
            errorMessages[selectedSet.SetNum] = $"The set '{selectedSet.Name}' is already in '{collection.Name}'.";
            successMessages.Remove(selectedSet.SetNum);
            return;
        }

        // Add set to collection
        collection.Sets.Add(selectedSet);
        await CollectionService.SaveCollectionsAsync(); // Save in LocalStorage

        successMessages[selectedSet.SetNum] = $"Set '{selectedSet.Name}' added to '{collection.Name}'.";
        errorMessages.Remove(selectedSet.SetNum);
        
        dropdownVisibility[selectedSet.SetNum] = true; // Keep dropdown menu temporarily open
        StateHasChanged();

        // Triggering automatic message reset after 3 seconds
        await Task.Delay(3000);  // 3 seconds delay
        successMessages.Remove(selectedSet.SetNum); // Reset success message
        errorMessages.Remove(selectedSet.SetNum); // Reset error message
        
        StateHasChanged(); // Force UI update to reflect changes
    }
    
    // Move to the next page in pagination if possible
    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
        }
    }

    // Move to the previous page in pagination if possible
    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }
}