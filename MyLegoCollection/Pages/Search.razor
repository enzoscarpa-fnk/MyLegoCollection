@page "/search"
@using MyLegoCollection.Models
@inject RebrickableService RebrickableService

<PageTitle>Search - My LEGO Collection</PageTitle>

<h3>Search LEGO sets</h3>

<!-- Input field for the search query -->
<input @bind="searchQuery" @oninput="UpdateSearchQuery" @onkeydown="HandleKeyDown" placeholder="Search for a LEGO set..." />
<button @onclick="SearchSets">Search</button>

@if (sets == null)
{
    <p>Loading sets...</p>
}
else if (!sets.Any())
{
    <p>Sets not found.</p>
}
else
{
    <ul>
        @foreach (var set in sets)
        {
            <li>
                <strong>@set.SetNum @set.Name</strong> (@set.Year) - @set.NumParts pieces
                <br />
                <img src="@set.SetImgUrl" alt="@set.Name" width="100" />
            </li>
        }
    </ul>
}

@code {
    private List<LegoSet> sets; // List to store LEGO sets
    private string searchQuery = ""; // Stores the user's search input

    protected override async Task OnInitializedAsync()
    {
        sets = await RebrickableService.GetSetsAsync(); // Load initial sets from the API
    }

    // Performs a search based on the user's query
    private async Task SearchSets()
    {
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            sets = await RebrickableService.SearchSetsAsync(searchQuery);
        }
    }

    // Updates the search query when the user types
    private void UpdateSearchQuery(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? "";
    }

    // Triggers search when the Enter key is pressed
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchSets();
        }
    }
}