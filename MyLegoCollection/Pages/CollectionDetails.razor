@using MyLegoCollection.Models

@if (Collection != null)
{
    <h4>@Collection?.Name</h4>
    
    @if (Collection.Sets.Count == 0)
    {
        <p>This collection has no sets yet.</p>
    }
    else
    {
        <ul>
            @foreach (var set in Collection.Sets.Skip((currentPage - 1) * pageSize).Take(pageSize))
            {
                <li>
                    <span>@set.SetNum - @set.Name</span>
                    <button @onclick="() => RemoveSet(set.SetNum)" class="remove-button">x</button>
                </li>
            }
        </ul>

        <div class="pagination">
            <button @onclick="PreviousPage" disabled="@(currentPage == 1)">&lt;</button>
            <span>&emsp;Page @currentPage of @totalPages&emsp;</span>
            <button @onclick="NextPage" disabled="@(currentPage == totalPages)">&gt;</button>
        </div>
    }
}
else
{
    <p>Select a collection to display its content.</p>
}

@code {
    [Parameter] public LegoCollection Collection { get; set; }
    [Inject] private CollectionService CollectionService { get; set; }
    
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => Collection.Sets == null || Collection.Sets.Count == 0 ? 1 : (int)Math.Ceiling((double)Collection.Sets.Count / pageSize);

    private async Task RemoveSet(string setNum)
    {
        Collection.Sets.RemoveAll(s => s.SetNum == setNum);
        await CollectionService.SaveCollectionsAsync();
        StateHasChanged();
    }
    
    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
        }
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }
}